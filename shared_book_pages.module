<?php

function shared_book_pages_entity_load(array $entities, $type) {
  if ($type != 'node') {
    return;
  }
  foreach ($entities as $entity) {
    if ($entity->type !== 'book') {
      return;
    }
    if (count($entity->field_shared_book_page) != 1) {
      return;
    }
    // the source node should not be tagged with it's own nid, but in case it is, bail out to prevent infinite loop!
    //TODO: support locale
    $term = taxonomy_term_load($entity->field_shared_book_page[LANGUAGE_NONE][0]['tid']);
    $eid = intval($term->name);
    if ($eid == $entity->nid) {
      return;
    }
    //TODO: Can the source node be tagged with the nid of a source-source-node? Use a static variable to make that illegal? Performance...
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'book')
      ->entityCondition('entity_id', $eid, '=');
    $result = $query->execute();
    if (isset($result['node'])) {
      $source_nid = array_keys($result['node']);
      $source_node = entity_load('node', array($source_nid[0]));
      $entity->title = $source_node[$eid]->title;
      $entity->body = $source_node[$eid]->body;
    }
  }
}

function shared_book_pages_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case "book_node_form":
      if ($form['#node_edit_form'] ==! TRUE) {
        return;
      }
      if (!empty($form['field_shared_book_page'][LANGUAGE_NONE]['#default_value'])) {
        $nid = $form['field_shared_book_page'][LANGUAGE_NONE]['#default_value'];
        $form_state['process_input'] = FALSE;
        $form = array();
        $form['#parents'] = array();
        $form['#array_parents'] = array();
        $form['#tree'] = FALSE;
        $form['shared_page'] = array(
          '#type' => 'item',
          '#title' => "This is a shared page",
          '#markup' => "This page is used in multiple books.  To edit it please " . l("edit the source content", 'node/' . $nid . '/edit')
        );
      }
      break;

  }
}
/**
 * Implementation of hook_menu_alter
 * @param $items
 *
 * Don't display the shared book in the list of books.
 */
function shared_book_pages_menu_alter(&$items) {
  $items['book'] = array(
    'title' => 'Books',
    'page callback' => 'shared_book_pages_book_render',
    'access arguments' => array('access content'),
    'type' => MENU_SUGGESTED_ITEM,
    'file' => '',
  );
}
/**
 * Menu callback: Prints a listing of all books.
 *
 * @return string
 *   A HTML-formatted string with the listing of all books content.
 *
 * @see book_menu()
 */
function shared_book_pages_book_render() {
  require_once(drupal_get_path('module', 'book') . "/book.module");
  $shared_book_title = variable_get('shared_book_title', 'Shared Book Pages');
  $book_list = array();
  foreach (book_get_books() as $book) {
    if ($book['title'] != $shared_book_title) {
      $book_list[] = l($book['title'], $book['href'], $book['options']);
    }
  }
  return theme('item_list', array('items' => $book_list));
}
