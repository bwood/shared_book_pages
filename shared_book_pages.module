<?php


function shared_book_pages_entity_load(array $entities, $type) {
  if ($type != 'node') {
    return;
  }
  foreach ($entities as $entity) {
    if ($entity->type !== 'book') {
      return;
    }
    if (count($entity->field_shared_book_page) != 1) {
      return;
    }
    // the source node should not be tagged with it's own nid, but in case it is, bail out to prevent infinite loop!
    //TODO: support locale
    $term = taxonomy_term_load($entity->field_shared_book_page[LANGUAGE_NONE][0]['tid']);
    if (!$term) {
      return;
    }
    $eid = intval($term->name);
    if ($eid == $entity->nid) {
      return;
    }

    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'book')
      ->entityCondition('entity_id', $eid, '=');
    $result = $query->execute();
    if (isset($result['node'])) {
      $source_nid = array_keys($result['node']);
      $source_node = entity_load('node', array($source_nid[0]));
      $entity->title = $source_node[$eid]->title;
      $entity->body = $source_node[$eid]->body;
    }
  }
}

function shared_book_pages_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case "book_node_form":
      if ($form['#node_edit_form'] !== TRUE) {
        return;
      }
      /*
       * Alter the edit form just on nodes with values in field_shared_book_page i.e. nodes which share content from other pages
       */
      if (!empty($form['field_shared_book_page'][LANGUAGE_NONE]['#default_value'])) {
        $nid = $form['field_shared_book_page'][LANGUAGE_NONE]['#default_value'];
        $form_state['process_input'] = FALSE;
        // TODO: Arbitrary fields could be added, which should be filtered?
        $form['title']['#access'] = FALSE;
        $form['body']['#access'] = FALSE;
        $form['shared_page'] = array(
          '#type' => 'item',
          '#title' => "This is a shared page",
          '#markup' => "This page is used in multiple books.  To edit it please " . l("edit the source content", 'node/' . $nid . '/edit'),
        );
      }

      // Add custom validation callback on all book nodes
      array_push($form['#validate'], 'shared_book_pages_validate');
      // Add custom submit handler
      array_push($form['#submit'], 'shared_book_pages_form_submit');

      /*
       * When editing a page that is shared by other pages, list these pages so the editor will be aware
       * of ramifications of edits
       */
      $references = shared_book_pages_get_references($form['nid']['#value']);
      if (array_key_exists('node', $references)) {
        if (count($references['node'] > 0)) {
          $html = "<ul>\n";
          foreach ($references['node'] as $node) {
            $html .= "<li>" . shared_book_pages_get_title($node->nid) . "</li>\n";
          }
          $html .= "</ul>\n";
        }
        drupal_set_message("The following pages share this page's content: $html Keep in mind that changes you make to this page will also affect the above pages.", "warning");
      }
      break;

    case 'node_delete_confirm':
      if ($form['#node']->type !== 'book') {
        return;
      }
      $references = shared_book_pages_get_references($form['nid']['#value']);
      if (count($references['node'] > 0)) {
        $html = "<ul>\n";
        foreach ($references['node'] as $node) {
          $html .= "<li>" . shared_book_pages_get_title($node->nid) . "</li>\n";
        }
        $html .= "</ul>\n";
      }
      $form['#submit'][] = 'shared_book_pages_node_delete_confirm_submit';
      drupal_set_message("This action will <strong>also delete the following pages</strong> which share this content: " . $html, "warning");
      break;
  }
}

/**
 * Implementation of hook_menu_alter
 * @param $items
 *
 * Don't display the shared book in the list of books.
 */
function shared_book_pages_menu_alter(&$items) {
  $items['book'] = array(
    'title' => 'Books',
    'page callback' => 'shared_book_pages_book_render',
    'access arguments' => array('access content'),
    'type' => MENU_SUGGESTED_ITEM,
    'file' => '',
  );
}

/**
 * Menu callback: Prints a listing of all books.
 *
 * @return string
 *   A HTML-formatted string with the listing of all books content.
 *
 * @see book_menu()
 */
function shared_book_pages_book_render() {
  require_once(drupal_get_path('module', 'book') . "/book.module");
  $shared_book_title = variable_get('shared_book_title', 'Shared Book Pages');
  $book_list = array();
  foreach (book_get_books() as $book) {
    if ($book['title'] != $shared_book_title) {
      $book_list[] = l($book['title'], $book['href'], $book['options']);
    }
  }
  return theme('item_list', array('items' => $book_list));
}

/**
 * Form validation handler for node_form().
 *
 * @see shared_book_pages_form_alter()
 * @see node_form()
 * @see node_form_submit()
 */
function shared_book_pages_validate($form, &$form_state) {
  /*
   * Prevent circular sharing:
   * If node 10 shares node 12, node 12 can't save node 10 as it's shared page
   */
  $references = shared_book_pages_get_references($form['nid']['#value']);
  $requested_refereneced_nid = NULL;
  if (count($form_state['values']['field_shared_book_page'][LANGUAGE_NONE]) > 0) {
    $requested_refereneced_nid = $form_state['values']['field_shared_book_page'][LANGUAGE_NONE][0]['name'];
  }
  if ((!empty($requested_refereneced_nid)) && (array_key_exists('node', $references))) {
    if (in_array($requested_refereneced_nid, array_keys($references['node']))) {
      form_set_error('field_shared_book_page', t("The page " . shared_book_pages_get_title($requested_refereneced_nid) . " (node_id = %nid) already references <em>this</em> node. Referencing that node would create a circular reference which we cannot allow.", array('%nid' => $requested_refereneced_nid)));
    }
  }
}

/**
 * Given a node_id search for it in the Shared Books vocabulary, if found return
 * its term_id, else return NULL
 *
 * @param $nid
 * @return string
 */
function shared_book_pages_get_term_id_by_nid($nid) {
  // get the vid for the vocabulary
  $vocab = taxonomy_vocabulary_machine_name_load(variable_get('shared_book_pages_vocabulary', 'shared_book_pages'));
  // Get all term objects in shared pages vocabulary
  $terms = taxonomy_get_tree($vocab->vid);
  // Find the term_id for this $nid. Should only be 1, but if multiple, first one wins
  // (Might be better to use real db tables)

  //Make $tid static so we don't have to search the terms > once in a page request.
  static $tid = NULL;
  if ($tid === NULL) {
    foreach ($terms as $term) {
      if ($term->name == $nid) {
        $tid = $term->tid;
        break;
      }
    }
  }
  return $tid;
}

function shared_book_pages_get_references($nid) {
  $tid = shared_book_pages_get_term_id_by_nid($nid);
  // Find all entities referencing this the term_id of our nid.
  $nodeQuery = new EntityFieldQuery();
  $entities = $nodeQuery->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'book')
    // ->propertyCondition('status', 1) //Look for published or unpublished pages
    ->fieldCondition('field_shared_book_page', 'tid', $tid)
    ->execute();
  return $entities;
}

function shared_book_pages_get_title($nid, $show_book = TRUE, $linked_title = TRUE) {
  $node = node_load($nid);
  $shared_by = NULL;
  if ($show_book) {
    // if a page isn't in a book, don't try to display its book.
    if (property_exists($node, 'book')) {
      $book = node_load($node->book['bid']);
      $shared_by = "Book: " . l($book->title, "node/" . $book->nid, array('attributes' => array('target' => '_new'))) . " Page: ";
    }
  }
  if ($linked_title) {
    $shared_by .= l($node->title, "node/" . $node->nid, array('attributes' => array('target' => '_new')));
  }
  else {
    $shared_by .= $node->title;
  }
  return $shared_by;
}

/**
 * Implementation of hook_node_update
 */

function shared_book_pages_node_update($node) {
  if ($node->type != 'book') {
    return;
  }
  // Notify on the unpublishing
  if ($node->original->status == 1 && $node->status == 0) {
    $references = shared_book_pages_get_references($node->nid);
    if (array_key_exists('node', $references)) {
      if (count($references['node'] > 0)) {
        $html = "<ul>\n";
        foreach ($references['node'] as $node) {
          $html .= "<li>" . shared_book_pages_get_title($node->nid) . "</li>\n";
        }
        $html .= "</ul>\n";
      }
      drupal_set_message("The following pages share this page's content: $html. Even though this page is now unpublished, the above pages will still display content from this page.", "warning");
    }
  }

  // Notify on sharing
  if ((count($node->original->field_shared_book_page) == 0) && ((count($node->field_shared_book_page) == 1))) {
    drupal_set_message("You have <b>shared</b> this page. <ul><li>Updates to the source page at  " . shared_book_pages_get_title($node->field_shared_book_page[LANGUAGE_NONE][0]['name']) . " will be reflected in this page.</li></ul>");
  }
  // Notify on UN-sharing
  // TODO: clean up array_key_exists LANGUAGE_NONE.
  elseif ((array_key_exists(LANGUAGE_NONE, $node->original->field_shared_book_page) && (array_key_exists(LANGUAGE_NONE, $node->field_shared_book_page))) &&
    (count($node->original->field_shared_book_page[LANGUAGE_NONE]) == 1) && ((count($node->field_shared_book_page[LANGUAGE_NONE]) == 0))
  ) {
    $term = taxonomy_term_load($node->original->field_shared_book_page[LANGUAGE_NONE][0]['tid']);
    drupal_set_message("You have <b>un-shared</b> this page. <ul><li>The content from the source page at " . shared_book_pages_get_title($term->name) . " has been copied into this page.</li> <li>Updates to that source page will no longer be reflected in this page.</li></ul>");
  }
}

/**
 * Custom delete submit
 *
 * @param $form
 * @param $form_state
 * @param $form_id
 *
 * 1. alert user about what will happen to shared pages
 * 2. remove its nid-term from the Shared Pages vocab
 */
function shared_book_pages_node_delete_confirm_submit(&$form, &$form_state, $form_id) {
  // Send the user back to the parent book.
  $form_state['redirect'] = 'node/' . $form['#node']->book['bid'];
  $shared_pages = array();
  $references = shared_book_pages_get_references($node->nid);
  if (count($references['node'] > 0)) {
    $html = "<ul>\n";
    foreach ($references['node'] as $n) {
      $html .= "<li>" . shared_book_pages_get_title($n->nid, TRUE, FALSE) . "</li>\n";
      $shared_pages[] = $n->nid;
    }
    $html .= "</ul>\n";
    $tid = shared_book_pages_get_term_id_by_nid($n->nid);
    node_delete_multiple($shared_pages);
    drupal_set_message("Deleted " . $node->nid . " (tid=$tid) from the Shared Pages vocabulary.");
    taxonomy_term_delete($tid);
  }
  drupal_get_messages();
  drupal_set_message("The following shared pages have also been deleted $html");
}

/**
 * Custom submit handler
 *
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function shared_book_pages_form_submit(&$form, &$form_state) {
  /*
   * Disallow chains of shared pages:
   * If node 10 shares content from 12, 8 can't share content from 10. They should be told to share content from 12 which is the true source page.
   * Without this restriction in place the code that handles deleting 12 (a source page) is needlessly complex.
   */
  $requested_refereneced_nid = NULL;
  if (count($form_state['values']['field_shared_book_page'][LANGUAGE_NONE]) > 0) {
    $requested_refereneced_nid = $form_state['values']['field_shared_book_page'][LANGUAGE_NONE][0]['name'];
    $rr_node = node_load($requested_refereneced_nid);
    if (count($rr_node->field_shared_book_page) > 0) {
      $term = taxonomy_term_load($rr_node->field_shared_book_page[LANGUAGE_NONE][0]['tid']);
      $term = (array) $term;
      // remove old term array
      array_pop($form_state['values']['field_shared_book_page'][LANGUAGE_NONE]);
      // Select the true source term for the user by adding the source term array
      $form_state['values']['field_shared_book_page'][LANGUAGE_NONE][0] = $term;
      // Tell the user we overroad their choice
      drupal_set_message("You asked to share content from " . shared_book_pages_get_title($requested_refereneced_nid) . ", but that pages gets its content from " . shared_book_pages_get_title($term['name']) . ".  We've selected the true source page for you.");
    }
  }


  // Act on updating a source page
  // Only updates to title and body fields are respected at this time
  if (property_exists($form_state['node'], 'body')) {
    $new_body = $form_state['values']['body'][LANGUAGE_NONE][0]['value'];
  }
  else {
    $new_body = NULL;
  }

  if (property_exists($form_state['node'], 'body')) {
    $old_body = $form_state['node']->body[LANGUAGE_NONE][0]['value'];
  }
  else {
    $old_body = NULL;
  }

  $new_title = $form_state['values']['title'];
  $old_title = $form_state['node']->title;

  // If one of our shared fields has changed, make the equivalent update in the shared nodes.
  if (($new_body != $old_body) || ($new_title != $old_title)) {
    $references = shared_book_pages_get_references($form_state['values']['nid']);
    if (array_key_exists('node', $references)) {
      if (count($references['node'] > 0)) {
        $html = "<ul>\n";
        foreach ($references['node'] as $n) {
          //update the fields in the node that is sharing this content
          $node_sharing = node_load($n->nid);
          $node_sharing->title = $form_state['values']['title'];
          $node_sharing->body[LANGUAGE_NONE][0] = array(); //start fresh (safe_value may exist in $node_sharing and not in $node
          $node_sharing->body[LANGUAGE_NONE][0] = $form_state['values']['body'][LANGUAGE_NONE][0];
          node_save($node_sharing);
          // Create content for set_message after node_save.  url_alias may have changed.
          // TODO: if the title was edited the edit is not reflected in $html, but the link works
          $html .= "<li>" . shared_book_pages_get_title($n->nid) . "</li>\n";
        }
        $html .= "</ul>\n";
      }
      drupal_set_message("Your update was also applied to these pages: $html");
    }
  }
}